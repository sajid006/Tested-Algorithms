#include<bits/stdc++.h>
using namespace std;
#define mx 1000006

class Node
{
public:
    int value;
    Node *left, *right;
    Node(int val)
    {
        value = val;
        left = nullptr;
        right = nullptr;
    }
};
class BST
{
public:
    Node *root;

    BST()
    {
        root = nullptr;
    }

    bool isEmpty()
    {
        return root == nullptr;
    }

    void insertValue(int val)
    {
        Node *newNode = new Node(val);
        if(isEmpty())
        {
            root = newNode;
        }
        else
        {
            insertNode(root, newNode);
        }
    }

    bool searchValue(Node *root, int val)
    {
        if(root == nullptr)return false;
        if(root->value == val)return true;
        else if(val < root->value)return searchValue(root->left, val);
        else searchValue(root->right, val);
    }

    int minValue(Node *root)
    {
        if(root->left == nullptr)return root->value;
        return minValue(root->left);
    }

    int maxValue(Node *root)
    {
        if(root->right == nullptr)return root->value;
        return maxValue(root->right);
    }

    void deleteValue(int value)
    {
        root = deleteNode(root, value);
    }

    Node* deleteNode(Node *root, int value)
    {
        if(root == nullptr)return root;
        if(value<root->value)root->left = deleteNode(root->left, value);
        else if(value>root->value)root->right = deleteNode(root->right, value);
        else
        {
            if(root->left == nullptr && root->right == nullptr)return nullptr;
            if(root->left == nullptr)return root->right;
            else if(root->right == nullptr) return root->left;
            root->value = minValue(root->right);
            root->right = deleteNode(root->right, root->value);
        }
        return root;

    }

    void insertNode(Node *root, Node *newNode)
    {
        if(newNode->value < root->value)
        {
            if(root->left == nullptr)
            {
                root->left = newNode;
            }
            else
            {
                insertNode(root->left, newNode);
            }
        }
        else
        {
            if(root->right == nullptr)
            {
                root->right = newNode;
            }
            else
            {
                insertNode(root->right, newNode);
            }
        }
    }

    void preOrder(Node *root)
    {
        if(root!=nullptr)
        {
            cout<<root->value<<endl;
            preOrder(root->left);
            preOrder(root->right);
        }
    }

    void inOrder(Node *root)
    {
        if(root!=nullptr)
        {
            inOrder(root->left);
            cout<<root->value<<endl;
            inOrder(root->right);
        }
    }

    void postOrder(Node *root)
    {
        if(root!=nullptr)
        {
            postOrder(root->left);
            postOrder(root->right);
            cout<<root->value<<endl;
        }
    }

    void levelOrder()
    {
        /// Using BFS
        queue<Node*>q;
        q.push(root);
        while(!q.empty())
        {
            Node* cur = q.front();
            q.pop();
            cout<<cur->value<<endl;
            if(cur->left!=nullptr)q.push(cur->left);
            if(cur->right!=nullptr)q.push(cur->right);
        }
    }

    int heightOfNode(Node *root)
    {
        if(root == nullptr)return 0;
        int leftHeight = heightOfNode(root->left);
        int rightHeight = heightOfNode(root->right);
        return max(leftHeight, rightHeight) +1;
    }
};

int main()
{
/// preorder- root, left, right
/// inorder-left, root, right
/// postorder-left, right, root
    BST bst;
    bst.insertValue(10);
    bst.insertValue(5);
    bst.insertValue(15);
    bst.insertValue(3);
    bst.insertValue(17);
    bst.insertValue(2);
    cout<<"In order"<<endl;
    bst.inOrder(bst.root);
    cout<<endl;
    cout<<bst.searchValue(bst.root, 10)<<endl;
    cout<<bst.searchValue(bst.root, 7)<<endl;
    bst.deleteValue(17);
    cout<<"Pre Order"<<endl;
    bst.preOrder(bst.root);
    cout<<endl;
    cout<<"Level Order"<<endl;
    bst.levelOrder();
    cout<<endl;
    cout<<bst.minValue(bst.root)<<endl;
    cout<<bst.maxValue(bst.root)<<endl;
    return 0;
}
