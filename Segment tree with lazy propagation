// codeforces 52c
#include <bits/stdc++.h>
using namespace std;
#define ll long long
#define pb push_back
#define filein freopen("in.txt","r",stdin)
#define fileout freopen("out.txt","w",stdout)
#define all(v) v.begin(),v.end()
#define ff first
#define ss second
#define mod 1000000007
#define mx 300005
#define pll pair<ll,ll>
#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
struct info
{
    ll sum,prop;
};

info tree[4*mx];
ll ara[mx],n;
void init(ll node, ll b, ll e) {
	if (b == e) {
		tree[node].sum = ara[b];
		tree[node].prop = 0;
		return;
	}
	ll left = node << 1;
	ll right = (node << 1) + 1;
	ll mid = (b + e) >> 1;
	init(left, b, mid);
	init(right, mid + 1, e);
	tree[node].sum = min(tree[left].sum , tree[right].sum);
}


void pushdown(ll node, ll b, ll e)
{
    if(tree[node].prop && b!=e)
    {
        ll Left=node<<1;

        ll Right=Left+1;

        tree[Left].prop+=tree[node].prop;

        tree[Right].prop+=tree[node].prop;

        tree[Left].sum+=tree[node].prop;

        tree[Right].sum+=tree[node].prop;
    }

    tree[node].prop=0;
}

void update(ll node, ll b, ll e, ll i, ll j, ll val)
{
    pushdown(node, b, e);

    if(i>e || j<b)
    {
        return ;
    }

    if(b>=i && e<=j)
    {
        tree[node].sum+=val;

        tree[node].prop+=val;

        return ;
    }

    ll mid=(b+e)>>1;

    ll Left=node<<1;

    ll Right=Left+1;

    update(Left, b, mid, i, j, val);

    update(Right, mid+1, e, i, j, val);

    tree[node].sum=min(tree[Left].sum,tree[Right].sum);
}

ll query(ll node, ll b, ll e, ll i, ll j)
{
    pushdown(node, b, e);

    if(i>e || j<b)
    {
        return 1e18;
    }

    if(b>=i && e<=j)
    {
        return tree[node].sum;
    }

    ll mid=(b+e)>>1;

    ll Left=node<<1;

    ll Right=Left+1;

    ll p1=query(Left, b, mid, i, j);

    ll p2=query(Right, mid+1, e, i, j);

    return min(p1,p2);

}

int main()
{
    //filein;
    //fileout;
    IOS
    ll i,j,q,value,left,right,x;
    cin>>n;
    for(i=1; i<=n; i++)
    {
        cin>>ara[i];
    }
    init(1,1,n);

    cin>>q;


    for(ll df=1; df<=(q+1); df++)
    {
        string str;

        getline(cin, str);
        if(df==1)
            continue;
        stringstream ss(str);
        vector<ll>tmp;
        while (! ss.eof())
        {
            ss >> x;
            tmp.pb(x);
        }
        //for(i=0;i<tmp.size();i++)cout<<tmp[i]<<endl;
        if(tmp.size()==2)
        {
            left=tmp[0]+1,right=tmp[1]+1;
            if(right>=left)
            {
                cout<<query(1,1,n,left,right)<<endl;
            }
            else
            {
                ll a=query(1,1,n,left,n);
                ll b=query(1,1,n,1,right);
                cout<<min(a,b)<<endl;
            }

        }

        else
        {
            left=tmp[0]+1,right=tmp[1]+1,value=tmp[2];
            if(right>=left)
            {
                update(1,1,n,left,right,value);
            }
            else
            {
                update(1,1,n,left,n,value);
                update(1,1,n,1,right,value);
            }

        }
    }
    return 0;
}
